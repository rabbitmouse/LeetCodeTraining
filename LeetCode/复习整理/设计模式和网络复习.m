/*
六大设计原则
    单一职责：
        一个类只负责一件事
    依赖倒置：
        抽象不应该依赖具体实现，具体实现可以依赖抽象
    开闭原则：
        对修改关闭，对扩展开放
    里氏替换：
        父类可以被子类无缝替换，切原有功能不受影响
        例如：KVO
    接口隔离：
        使用多个专门的协议，而不是一个庞大臃肿的协议
        例如：tableview的delegate和datasource
        协议中的方法应当尽量少
    迪米特法则：
        一个对象对其他对象有尽可能少的了解
        目的：高内聚、低耦合
*/

/*
HTTP
    请求/响应报文
        请求报文：
            方法    URL     协议版本    CRLF
            首部字段 : 值 : CRLF
            实体
        响应报文:
            版本    状态码    短语      CRLF
            首部字段 : 值 : CRLF
            实体主题
        HTTP请求方式
            GET/POST/HEAD/PUT/DELETE/OPTIONS

        GET和POST方式的区别
        GET：获取资源
            安全的 幂等的 可缓存的
        POST：处理资源
            非安全的 非幂等的 不可缓存的
        
        安全：不应该引起Server端的任何状态变化 -> GET HEAD OPTIONS
        幂等：同一个请求方法执行多次和执行一次的效果完全相同 -> GET PUT DELETE
        可缓存：请求是否可以被缓存 -> GET HEAD

        状态码
            1xx：
            2xx：响应成功
            3xx：重定向
            4xx：客户端请求本身有问题
            5xx：服务端有异常

    链接建立流程
        3次握手：
            Client: SYN同步报文
            Server: SYN，ACK同步确认报文
            Client: ACK确认报文

        Client-Server：http请求报文互相传递

        4次挥手：
            Client：FIN终止报文
            Server: ACK确认报文
            Server: FIN,ACK终止确认报文
            Client: ACK确认报文

    HTTP的特点
        无连接：有建立连接和释放连接的过程
            解决：HTTP的持久连接
            持久连接：
                头部字段：
                    Connection: keep-alive
                    time: 20
                    max: 10
                判断是否结束：
                    content-length：1024 接受字节数是否到达1024
                    chunke：最后会有一个空的chunked
        无状态：多次发送请求，同一个用户Server端不知道是同一个用户
            解决Cookie/Session

    Charles抓包工具原理
        中间人攻击：
*/

/*
HTTPS
    HTTPS = HTTP + SSL/TLS

        应用层  HTTP SSL/TLS
        传输层  TCP
        网络层  IP
            协议栈       
*/

/*
UDP
    无连接：不需要建立连接
    尽最大努力交付：不保证可靠传输
    面向报文：既不合并也不拆分

    功能：
        复用：多端口复用UDP报文
        分用：UDP报文拆分发送给多端口
        差错检测：
*/

/*
TCP
    面向连接
        三次握手
            Q：为什么要进行三次握手
                超时的时候，会启动超时重发
                如果只有两次握手，会多次建立连接
        四次挥手
    可靠传输 
        无差错，不丢失，不重复—— 超时重传，重传忽略，确认迟到
        按序到达——滑动窗口（有序）
    面向字节流
        发送缓冲——接受缓冲
        根据实际情况划分，传递部分字节到接收方
    流量控制——滑动窗口协议
        发送窗口 < 发送缓存
        接受缓存根据设备硬件和网络情况而定，可以调整发送窗口大小
        通过报文传递调整
        接受窗口 < 接受缓存
    拥塞控制
        慢开始、拥塞避免
            1.指数规律增长，到达门限初始值（慢开始）
            2.线性增长，直到网络拥塞（拥塞避免）
            3.乘法减小，恢复至发送1个报文，新门限 = 拥塞时报文数/2
            4.继续慢开始...
        快恢复、快重传
            网络拥塞后，恢复至新的门限值，进行线性增长，而不是从1开始重新进行慢开始
*/

/*
DNS
    域名到IP地址的映射，DNS解析请求采用UDP数据包，且明文
    Clint 发送域名到DNS获取IP 再连接服务器
*/

/*
Cookie
    记录用户状态，区分用户：状态保存在客户端
Session
    记录用户状态，区分用户：状态存放在服务器端
Session和Cookie的关系
    Session需要Cookie来实现
*/